package controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import controller.User;
import controller.UserRepository;


@Controller
public class HomeController {
	
	@Autowired // This means to get the bean called userRepository Which is auto-generated by Spring,it used to handle the data
   	private UserRepository userRepository;
	@Autowired 
   	private DocumentRepository documentRepository;
	
	private String user_id = "";
	
	@RequestMapping("/dashboard-s")
	public String login( HttpServletRequest request, HttpServletResponse response, Model model) {
		
		String username =  request.getParameter("username");
		String password = request.getParameter("password");
		
		user_id = username;
		//TODO: check the username and password from the database
		//for simplicity, i'll assume the user enters all valid data! for now
		User isSaved = userRepository.findByUsernameAndPassword(username, password);
		
		//System.out.println( "================ Retrieved : username:  " + isSaved.getUsername() + "    password: " + isSaved.getPassword() + "   ===============");
		try {
		
			if( isSaved == null || !isSaved.getUsername().equals(username.trim()) || !isSaved.getPassword().equals(password.trim())) {
				
				//TODO: notify user about invalid credentials.
				
				return "redirect:/";
				
			}
		}catch(Exception e) {
			System.out.println(e.getMessage());
			return "redirect:/";
		}
		
		//TODO: if correct logins, retrieve the files associated with that user from the data base and send them with model.
		List<Document> files = documentRepository.findByUsers_username(username);
		
		
		
		model.addAttribute("fileList", files);
		model.addAttribute("username", username);
				
		return "dashboard";
		
	}
	
	@RequestMapping("/add")
	public String add( HttpServletRequest request, Model model) {
		
		String username = request.getParameter("username");
		String email = request.getParameter("email");
		String password = request.getParameter("password");
		
		//TODO: save new user info to database
		//for simplicity,i'll assume the user enters all valid data! 
		User user = new User();
		user.setUsername( username );
		user.setEmail(email);
		user.setPassword(password);
		
		//save user
		userRepository.save(user);
		
		
		//TODO: validate the entered info and check if the password and confirm password match
		
		return "redirect:/";
		
	}
	
	
	@RequestMapping("/edit/{id}")
	public String editor(@PathVariable("id") Integer id, HttpServletRequest request, HttpServletResponse response, Model model) {

		//TODO: load file stream for the given fileID from the database
		
		Document file = documentRepository.findOne(id);
		model.addAttribute("file", file);
		
		return "editor";
		
	}
	
	
	@RequestMapping("/share")
	public String share(HttpServletRequest request, Model model) {
		
		
		try {
			Integer id = Integer.parseInt( request.getParameter("fileid") );
			String username = request.getParameter("shareto");
			
			User user = userRepository.findOne(username);
			Document doc = documentRepository.findOne(id);
			
			doc.getUsers().add(user);
			
			documentRepository.save(doc);
			
			
		}catch (Exception e) {
			System.out.println(e.getMessage());
		}
		
		
		List<Document> files = documentRepository.findByUsers_username(user_id);		
		model.addAttribute("fileList", files);
		
		return "dashboard";
		
	}
	
	@RequestMapping("/save-doc")
	public String save(HttpServletRequest request, Model model) {
		
		
		String fileid = request.getParameter("fileid");
		String filename = request.getParameter("filename");
		String datastream = request.getParameter("datastream");
		
		User belongsTo = userRepository.findOne(user_id);
		Document doc = new Document();
		
		if( !fileid.equalsIgnoreCase("") && fileid !=null )
			doc.setId( Integer.parseInt(fileid) );
		
		doc.setFilename(filename);
		doc.setDatastream(datastream);
		doc.getUsers().add(belongsTo);
				
		documentRepository.save( doc);
		
		
		List<Document> files = documentRepository.findByUsers_username(user_id);		
		model.addAttribute("fileList", files);
		model.addAttribute("username", user_id);
		
		return "dashboard";
		
	}


}
